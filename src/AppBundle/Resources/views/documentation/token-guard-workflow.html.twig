{% extends '@App/layout.html.twig' %}

{% block title %}Token Guard Workflow{% endblock %}

{% block body %}

    <div class="container">
        <h1>Token Guard Workflow</h1>

        <h3>Type Of Login Guards we have:</h3>

        <ol>
            <li>
                <h5>
                    <a href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Security/Guard/Token/ApiLoginTokenGuard.php">
                        Api Login Guard
                    </a>
                </h5>
                <blockquote>
                    Use on the api_login firewall to validate refresh_tokens, facebook, google, etc.
                    It used to get a credentialed response which contains the jws token and refresh token and user.
                    In order to validate the token it must have a type.
                </blockquote>
            </li>
            <li>
                <h5>
                    <a href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Security/Guard/Token/ApiTokenGuard.php">
                        Api Token Guard
                    </a>
                </h5>
                <blockquote>
                    Used for stateless authentication with api.
                    This guard we'll look in the header of a request under the Authorization.
                    Since no type is provided with this guard it returns type api.
                    <code>["token": "jws_token", "type" : "api"]</code>
                </blockquote>
            </li>
            <li>
                <h5>
                    <a href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Security/Guard/Token/SessionLoginGuard.php">
                        Session Login Guard
                    </a>
                </h5>
                <blockquote>
                    This works just like the Api Login Guard the only difference is the end point it is checking and the
                    fact that it will
                    authenticate the session instead of returning a credential response. This is used for the website
                    part of the site.
                </blockquote>
            </li>
        </ol>

        <h3>1) Check Credentials</h3>

        <p>
            We check and see if the request has a token and type.
            The type of token basically tells us which user provider we need to use to validate it and get the user.
            We'll go over that a bit more later.
            If that token does not have a type the request we'll be passed onto start function if authentication is
            required.
            That happens in every instance except for the api guard which protects the whole api.
            The reason is that a user might be requesting an end point on that firewall that does not require auth.
        </p>

        <h3>2) Get User</h3>

        <p>
            We use our token type to get the right user provider.
            This happens in the <a
                    href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Security/Guard/Token/AbstractTokenGuard.php">AbstractTokenGuard</a>
            because it is the the same process for all the token guards.
            If it can't validate the token or find a user it throw a UsernameNotFoundException.
        </p>

        <h3>3) Check Credentials</h3>

        <p>
            This will return true for all token authentication because the user provider validated the token for us.
            We technically could validate the token again for the api but it would cause a fork in the code.
            So we just do it the provider like we have to for facebook, google, and refresh tokens.
        </p>

        <h3>
            4) onAuthenticationSuccess
        </h3>

        <p>
            For all the guards that have the word login in them we'll pass a credentials response which has a jws token,
            refresh token and info about the user.  It will look something like this.
            <pre>
                {
                    "meta":{
                        "type":"credentials",
                        "paginated":false
                    },
                    "data":{
                            "user":{
                            "id":"96430bcc-6987-11e7-9d99-08002732ed09",
                            "displayName":"update_user_e2e",
                            "email":"update_user_e2e@email.com",
                            "bio":null
                        },
                        "tokenModel":{
                            "token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXUyJ9.eyJ1c2VyX2lkIjoiOTY0MzBiY2MtNjk4Ny0xMWU3LTlkOTktMDgwMDI3MzJlZDA5IiwiZXhwIjoxNTA1NDE1ODcxLCJpYXQiOjE1MDAyMzE4NzF9.vKuQmpOFPneh38vFnT7BJPqT89gaIq8MEcL4SrDUHvQ8Jpq0z-JVEex8vbSKJFORFwPGnw2X4xWgx-qs39C0T06oknn2fHF-jLOafwjwCRLTDeOyrDT6JX2sNxEirfS1kzvXL_lA74JuZO8g1twmjHiFSlvk2j32ueo9VnZZdisHvYHnl2zy8mgme3A8izKQsgw2UHBsSPy6x4fe80dWnf60Wp5NPZkBRtAPitE4SLktnJEVo93aSzUPVQiDfKPdA4J0zE7UfsmkDIqMflOIZI_CSCuKGJ77q8WWcziH47P_Qv4hF93s19hI9PAb1mMv75LrVc82JrftHyRC_wk_LF1J6al7lcKNWv9paw0VLJVHz-qBRY-LOFwkUzQNMZetXab_VA_FPTeR0itHZDku5Et64clb9_TzFeveQ7Q0W2yakPsFCDK24a1SxTqzVXMKSAiecQK6oFsSTSsDEekKlkrpXshHN3LlQ_OnDAyp-J8Bzl90MAE2VlP-WFEpNnFzH3G6apTkQ31RYNaV6EFC-TOv_rMmKvM9O0E7NezSPEs15jGSVEzd_I5Q44GkEij1mPij-F1pqjvVbbD81_MZZIon8QsS9hTWjCqHUxzAvoSZ_y7nheYGzwzxWc_dz2qN8v1ragbQrLAaUST12TLIAVE22Q_JPhHmI0wQi0u95Kk",
                            "expirationTimeStamp":1505415871
                        },
                        "refreshTokenModel":{
                            "token":"6fd9225321cc4867ff9c7f77cd748f23ce9a5186e6dbbae4f4a720aab7a7879bb9af60669e1fca45bf0d9a3033ff6f9a07a06c50996fa8406dcff2ecd2ba0955f994aa24d3b667dcf28e24f4d23fda666cf8d7a155ddef701796",
                            "expirationTimeStamp":1510599871
                        }
                    }
                }
            </pre>

            For the api guard we return null which allows the request to continue going to where ever it was going.
        </p>
        <h3>Start And onAuthenticationFailure</h3>

        <p>
            Start is called when auth is required and no credentials are present.  This will return a 401.
            onAuthenticationFailure is called when authentication fails for whatever reason. This returns a 403.
            For all guards this is the same so it handled in a
            <a href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Security/Guard/GuardTrait.php">trait</a>.
        </p>

        <h5>Also handled in the trait is the supportsRememberMe which always returns false.  Feel free to change this and configure it up.</h5>
    </div>


{% endblock %}