{% extends '@App/layout.html.twig' %}

{% block body %}

    <div class="container">
        <h1>Documentation</h1>

        <h2>Setup</h2>

        <ol>

            <li>git clone the repo: <code>git clone https://github.com/phptuts/symfonystarter.git</code></li>
            <li>navigate to the symfonystarter folder: <code>cd symfonystarter</code></li>
            <li>Install composer and run composer install: <code>composer install</code></li>
            <li>Go to facebook and setup your app.</li>
            <li>Go into your app -> config -> parameters.yml and replace these fields with the right value:
                <ul>
                    <li>facebook_app_secret</li>
                    <li>facebook_app_id</li>
                    <li>facebook_api_version</li>
                </ul>
            </li>
            <li>Go to google setup your app.</li>
            <li>Go into your app -> config -> parameters.yml and replace these fields with the right value:
                <ul>
                    <li>google_client_id:</li>
                    <li>google_client_secret:</li>
                </ul>
            </li>
            <li>
                Go to Amazon and setup your s3 bucket. You will need to create 3 folders or a folder for each
                environment.
                So ours would be dev | test | prod.
                Inside each of those folder you will need create a folder called. profile_pics.
                This is where your user's profile pictures will be stored.
                Here how the "magic" happens:
                <a href="https://github.com/phptuts/symfonystarter/blob/126a5b9441de032ecebd3c643111feb1411eb5dd/src/AppBundle/Controller/AccountSettingController.php#L37-L37">Accounting
                    Controller</a>
                |
                <a href="https://github.com/phptuts/symfonystarter/blob/4a203bee836fdebaadfea4967c5eee7bf2b85d4d/src/ApiBundle/Controller/UserController.php#L212-L212">Api
                    User Controller</a>
            </li>
            <li>Go to your app -> config -> parameters.yml and if you have not already setup your smtp and doctrine
                config
            </li>
            <li>Run <code>bin/console doctrine:database:create</code></li>
            <li>Run <code>bin/console doctrine:migrations:migrate</code></li>
            <li>Run <code>bin/console server:run</code> to see the code in action</li>
        </ol>


        <h2>Security.yml File Explained</h2>

        <p>
            Symfony uses the security.yml file to configure security.  Symfony divides security into authentication and authorization.  Authentication
            is the basically who you are.
        </p>

        <h3>Basic Definitions:</h3>

        <ul>
            <li>User Provider: A class / way to fetch a user.  Does not have to be from a database aka a facebook user provider.</li>
            <li>Encoders:  Basic methods for encoding the password.</li>
            <li>Firewalls:  Defines an area of the site and all authentication is configured and handled by it.</li>
            <li>Guards: A way of authenticating user.  We can implement an interface or extend a class to create our own custom authentiators. .</li>
            <li>Roles: A way of giving access to certain users roles are defined in hierarchical way.  Meaning a ROLE_USER is a ROLE_ADMIN.</li>
        </ul>

        <h3><a href="https://github.com/phptuts/symfonystarter/blob/master/app/config/security.yml#L12-L12">Default User Provider</a></h3>
        <p>
            We only allow people to use email for login. Which is why our our getUsername on User entity returns the
            email.
            This is called by the symfony default user provider. The reason I feel that email only login is better is
            that emails are unique and if you ever have to merge your database
            with another it will be a lot easier to merge on emails for accounts. The default user provider is setup
            here.
        </p>

        <h3><a href="https://github.com/phptuts/symfonystarter/blob/master/app/config/security.yml#L5">
            Password Encoder
            </a>
        </h3>

        <p>All users are encrypted using bcrypt password encoder. This is why getSalt on the user returns null.
            It's is not required for bcrypt passwords.
        </p>

        <h3><a href="https://github.com/phptuts/symfonystarter/blob/master/app/config/security.yml#L47">Desktop Firewall Setup</a></h3>

        <p>The desktop firewall is at the bottom because firewalls are first come first serve. This uses the standard
            form_login and a guard for authenticating facebook & google users.
            Guards allow us to roll out our own authentication.
        </p>

        <h2>Website Email & Password Login</h2>

        <p>Every post that goes to /login will intercepted by the symfony security.  If what the user enter is valid then user will be take to
        whatever page they where are before.  If that's not available they will go to home page.</p>

        <h2>Website Facebook & Google Authentication</h2>

        <p>Here are the setups for authentication via facebook / google on the desktop we are gonna go over guards a lot more later in the docs.</p>
        <ol>
            <li>Setup use the
                <a href="https://github.com/phptuts/symfonystarter/blob/master/src/AppBundle/Resources/views/user/social/facebook-auth-js.html.twig#L11">facebook</a>
                /
                <a href="https://github.com/phptuts/symfonystarter/blob/master/src/AppBundle/Resources/views/user/social/google-auth-js.html.twig#L17">google</a>
                library to request a token.  For facebook a modal will popup. For google, their library will take them to a new tab.  </li>
            <li>
                Once we have the token we send it to /token_login_check with <code>{"type": "facebook", "token": "fb_token" }</code>
            </li>
            <li>It will then go through the <a href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Security/Guard/Token/SessionLoginTokenGuard.php#L16">SessionLoginTokenGuard</a>.  This will authenticate the session.</li>
            <li>From there <a href="https://github.com/phptuts/symfonystarter/blob/master/src/AppBundle/Resources/views/user/social/token-auth-js.html.twig#L29">js</a> will redirect the user.</li>
        </ol>

        <h2><a href="https://github.com/phptuts/symfonystarter/blob/master/src/AppBundle/Controller/UserController.php#L59">Website Registration</a></h2>

        <p>
            Registration will authenticate the user via session.  It will act pretty much like login does.  Registration is handle by the <a href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Service/User/RegisterService.php#L78">register service</a>.
            This will encode the user's plain password and send a out a generic email.  The parameter from from_email is where from address comes from.
        </p>

        <h2>Custom File Upload Field Type</h2>

        <p> We have a custom file uploader field type that can be found here.  It renders out the file uploader using some nice bootstrap magic.
            If you want to use it else where you have to include the js  associated with it.  An example of that can be found on the account setting page.
            Here an example <a href="https://github.com/phptuts/symfonystarter/blob/master/src/AppBundle/Resources/views/account-settings/update-user.html.twig">page</a>.
            Here is where the twig is to render the form. <a href="https://github.com/phptuts/symfonystarter/blob/master/app/Resources/views/form/fields.html.twig">Twig</a>
        </p>

        <h2>File Uploads </h2>

        <p>
            Right now file uploads are handle by this <a href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Service/S3Service.php">s3 service</a>.
            It uses a <a href="https://github.com/phptuts/symfonystarter/blob/master/src/CoreBundle/Factory/S3ClientFactory.php">factory</a> to create an s3 client.
            All the upload service does is return a url that is stored in the database.  When you use the service you specify the folder that the the file will go in.  The service
            also depends on the environment as well.  So you if you specify the medical folder you and you are on the dev environment you will upload the file to /yourbucket/dev/medical.

        </p>





    </div>

{% endblock %}